@startuml
'!theme plain
top to bottom direction
skinparam linetype ortho

class Group as "Student_Model.group.Group" {
    -__name: str
    -__students: list[Student]
    -__exams: list[Exam]
    +__init__(self, name: str):
    +get_name(self): str
    +add_exam(self, exam: Exam): None
    +expel_student(self, index: int): None
    +get_list_of_exams(self): list[Exam]
    +add_student(self, student: Student): None
    +get_list_of_students(self): list[Student]
}

class Student as "Student_Model.student.Student" {
    -__name: str
    -__subjects_progress: list[Subject_Progress]
    +__init__(self, name: str):
    +get_name(self): str
    +get_subjects_progress(self): list[Subject_Progress]
}

class Schedule as "Student_Model.schedule.Schedule" {
    -__name: str
    -__time: str
    -__date: str
    +__init__(self, date: str, time: str):
    +get_name(self): str
    +get_time(self): str
    +get_date(self): str
}

class Exam as "Student_Model.exam.Exam" {
        -__name: str
        -__schedule: Schedule
        +__init__(self, name: str, date: str, time: str):
        +get_name(self): str
        +get_schedule(self): Schedule
}

class Subject_Progress as "Student_Model.subject_progress.Subject_Progress" {
    -__progress: int
    -__name: str
    +__init__(self, name: str):
    +get_progress(self): int
    +set_progress(self, int): None
    +get_name(self): str
}

class Student_Model_State_Machine as "student_model_state_machine.Student_Model_State_Machine" {
   +groups:
   +file: File
   +groups: list[Group]
   +selected_index: int
   +selected_group: Group
   +selected_student: Student
   +view_groups: State()
   +add_group: State()
   +view_group: State()
   +view_student: State()
   +add_student: State()
   +expel_student: State()
   +view_exams: State()
   +add_exam: State()
   +choice: State()
   +in_library: State()
   +view_subjects_progress: State()
   +in_university: State()
   +prepare_for_exams: State()
   +exit_: State()
   +next_state: None
   +__init__(self, file: File):
   +navigating_backwards(self, input_: str): None
   +navigating_by_index(self, input_: str): None
   +navigating_add(self, input_: str): None
   +navigating_exams(self, input_: str): None
   +navigating_expel(self, input_: str): None
   +navigating_prepare(self, input_: str): None
   +navigating_yes(self, input_: str): None
   +navigating_no(self, input_: str): None
   +navigating_subjects_progress(self, input_: str): None
   +navigating_go_to_university(self, input_: str): None
   +on_enter_view_groups(self): None
   +on_enter_add_group(self): None
   +on_enter_view_group(self): None
   +on_enter_expel_student(self): None
   +on_enter_add_student(self): None
   +on_enter_view_student(self): None
   +on_enter_view_exams(self): None
   +on_enter_add_exam(self): None
   +on_enter_view_subjects_progress(self): None
   +on_enter_prepare_for_exams(self): None
   +on_enter_in_library(self): None
   +on_enter_choice(self): None
   +on_enter_in_university(self): None
   +before_move_next(self): None
   +on_enter_exit_(self): None
}
class object
class BaseException
class File_Exception as "Exception.exceptions.File_Exception"
class Delete_Exception as "Exception.exceptions.Delete_Exception"

class Student_File as "Student_File.student_file.Student_File" {
   -__file_name: str
   +__init__(self, filename: str):
   +save(self, obj): None
   +load(self):
}
abstract class File as "Student_File.file.File" {
   +save(self, obj): None
   +load(self):
}
class ValidNumber as "check_correct_input_classes.ValidNumber" {
   +input_number(self, string: str): int
   +input_index(self, string: str, num: int): int
   +input_number_of_classes(self, string: str): int
}
class ValidDate as "check_correct_input_classes.ValidDate" {
   +input_date(self, string: str): str
   +input_time(self, string: str, num: int): str
   +input_ours(self, string: str): int
}
class ValidSubjectName as "check_correct_input_classes.ValidSubjectName" {
   +input_subject_name(self, string: str): str
}
class ValidInitials as "check_correct_input_classes.ValidInitials" {
   +input_initials(self, string: str): str
}
abstract class ValidValue

ValidValue <|-- ValidDate
ValidValue <|-- ValidInitials
ValidValue <|-- ValidNumber
ValidValue <|-- ValidSubjectName
object <|-- ValidValue

ValidDate --o Schedule
ValidInitials --o Student
ValidNumber --o Group
ValidSubjectName --o Exam

BaseException --|> object
BaseException --|> Exception
Exception <|-- File_Exception
Exception <|-- Delete_Exception

Student --|> object
Group --|> object
Exam --|> object
Schedule --|> object
Subject_Progress --|> object
File  --|> object
statemachine --|> object

class Hashable as "typing.Hashable"
object --|> Hashable

Student_Model_State_Machine --|> statemachine

Student_File --|> File

Exam "1" *-- "1" Schedule
Group "1" o-- "0.." Student
Group "1" o-- "0.." Exam
Exam "1" *-- "1" Subject_Progress
Student "1" *-- "0.." Subject_Progress

Student_Model_State_Machine "1" o-- "0.." Group
Student_Model_State_Machine "1" o-- "0.." Student


@enduml